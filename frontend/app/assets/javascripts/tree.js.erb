//= require jquery.cookie
//= require jquery.ba-hashchange
//= require jquery.hotkeys
//= require jstree

$(function() {
  var form_changed = false,
    $tree = $("#archives_tree"),
    $container = $("#object_container");

  if (AS.tree_data && $tree.length) {
    var config = {
      root_object_id: AS.tree_data.id,
      root_node_type: AS.tree_data.node_type,
      read_only: $(".archives-tree").data("read-only"),
      rules: $(".archives-tree").data("rules")
    };

    var refreshSelectedNode = function() {
      var currentNodeEl = $(".selected", $tree);
      var currentNodeType = currentNodeEl.attr("rel");

      if (currentNodeEl.attr("id") === "new") {
        // replace the new node with a real AO node

        var parentNode = currentNodeEl.parents("li:first");
        var child_id = $("#id", $container).val();

        var selected_node_id = currentNodeType + "_" + child_id;

        currentNodeEl.remove();

        $tree.jstree("create_node", parentNode, "last", {"attr":{"id": selected_node_id}, "data": {"title": $("#"+currentNodeType+"_title_", $container).val()}});
        $("#"+selected_node_id, $tree).addClass(currentNodeType).addClass("selected").attr("rel", currentNodeType).data("id", child_id);
        $("#"+selected_node_id, $tree).find("a").attr("href", "#tree::"+selected_node_id).addClass("jstree-clicked");

        loadTreeActionsForNode($("#"+selected_node_id, $tree));
      } else {
        // Simply rename the node (just in case the node's title has changed)
        var new_title = $("#"+currentNodeType+"_title_", $container).val();
        $tree.jstree("rename_node", currentNodeEl, new_title);
      }
    };


    var initForm = function(html) {
      $container.html(html);

      var $form = $("form", $container);

      $(".btn-cancel", $form).html("Revert Changes");
      $(".btn-cancel", $form).before("<a id='save_and_finish_editing' class='btn btn-success' href='" + APP_PATH + config.root_node_type + "s/" + config.root_object_id + location.hash + "'>Finish Editing</a>");

      if (location.hash !== "#tree::new") {
        $(".btn-primary", $form).attr("disabled", "disabled");
        $(".btn-cancel", $form).attr("disabled", "disabled");
      }

      $form.bind("form-changed", function() {
        form_changed = true;
        $(".btn-primary", $form).removeAttr("disabled");
        $(".btn-cancel", $form).removeAttr("disabled");
      });

      $("#createPlusOne", $form).click(function() {
        var createPlusOne = function(event, data) {
          if (data.success) {
            $(".archives-tree-container .add-sibling").trigger("click");
          }
        };

        $container.one("submitted", createPlusOne);
        $form.triggerHandler("submit");
      });

      $form.ajaxForm({
        data: {
          inline: true
        },
        beforeSubmit: function() {
          $(".btn-primary", $form).attr("disabled","disabled");
        },
        success: function(response, status, xhr) {
          initForm(response);

          if ($container.find(".form-messages .alert-error:first, .form-messages .alert-warning:first").length) {
            $container.triggerHandler("submitted", {success: false});
          } else {
            if (location.hash === "#tree::new") {
              changeHashSilently("#"+$(".selected", $tree).attr("rel")+"_" + $(response).find("#id").val());
            }
            form_changed = false;
            refreshSelectedNode();
            $container.triggerHandler("submitted", {success: true});
          }
          // scroll back to the top
          $("header").ScrollTo();
        },
        error: function(obj, errorText, errorDesc) {
          $container.prepend("<div class='alert alert-error'><p>An error occurred saving this record.</p><pre>"+errorDesc+"</pre></div>");
          $container.triggerHandler("submitted", {success: false});
          $(".btn-primary", $form).removeAttr("disabled");
        }
      });

      AS.resetScrollSpy();

      $container.triggerHandler("form.loaded");
    };


    var loadPaneForNode = function(nodeEl) {

      if (config.read_only) {

        var params = {};
        params.inline = true;
        params[config.root_node_type+"_id"] = config.root_object_id;

        $.ajax({
          url: APP_PATH+nodeEl.attr("rel")+"s/"+nodeEl.data("id"),
          type: 'GET',
          data: params,
          success: function(html) {
            $container.html(html);
            AS.resetScrollSpy();
          }
        });

        return;
      }

      if (nodeEl.attr("id") === "new") {

        var data = {
          inline: true
        };
        data[config.root_node_type + "_id"] = config.root_object_id;

        var $parentNodeEl = nodeEl.parents("li:first");
        if ($parentNodeEl.attr("rel") === nodeEl.attr("rel")) {
          data[$parentNodeEl.attr("rel") + "_id"] = $parentNodeEl.data("id");
        }

        if (nodeEl.data("params")) {
          data = $.extend({}, data, nodeEl.data("params"));
        }

        $.ajax({
          url: APP_PATH + nodeEl.attr("rel") + "s/new",
          data: data,
          type: "GET",
          success: function(html) {
            initForm(html);
            $("form", $container).triggerHandler("form-changed");
          },
          error: function() {
            $container.html("<div class='alert alert-error'><p>An error occurred loading this form.</p><pre>"+errorDesc+"</pre></div>")
            console.log("ERROR! $('.archives-tree-container').on('click', '.add-child')");
          }
        });
      } else if (nodeEl.attr("rel")) {
        $.ajax({
          url: APP_PATH+nodeEl.attr("rel")+"s/"+nodeEl.data("id")+"/edit?inline=true",
          success: function(html) {
            initForm(html);
          },
          error: function(obj, errorText, errorDesc) {
            $container.html("<div class='alert alert-error'><p>An error occurred loading this record.</p><pre>"+errorDesc+"</pre></div>")
          }
        });
      }
    };


    var renderTreeNodeNavigation = function(event) {
      var currentNodeEl = $(".selected", $tree);
      if (currentNodeEl.length === 0) {
        return;
      }

      var allNodes = $tree.find("li");
      var indexOfCurrentNode = allNodes.index(currentNodeEl);
      var data = {
        config: config
      };
      if (indexOfCurrentNode !== 0) {
        data.previous = allNodes.get(indexOfCurrentNode-1).id;
      }
      if (indexOfCurrentNode+1 < allNodes.length) {
        data.next = allNodes.get(indexOfCurrentNode+1).id;
      }
      $(".btn-toolbar > .btn-group:first", "#archives_tree_toolbar").append(AS.renderTemplate("tree_nodenavigation_toolbar_template", data));
    };


    var loadTreeActionsForNode = function(nodeEl) {
      // render tree toolbar
      $("#archives_tree_toolbar").html(AS.renderTemplate("tree_toolbar_template"));
      renderTreeNodeNavigation();
      if (config.read_only != true && nodeEl.attr("id") != "new") {
        var data_for_toolbar = {
          rules: config.rules[nodeEl.attr("rel")],
          node: nodeEl
        };
        if (nodeEl.parents("li").length) {
          data_for_toolbar.parent = nodeEl.parents("li:first");
          data_for_toolbar.sibling_ids = nodeEl.siblings("li").map(function(e) { return $(this).attr("id"); }).toArray();
        }
        var toolbar_actions = $(AS.renderTemplate("tree_nodeactions_toolbar_template", data_for_toolbar));
        $(".btn-toolbar > .btn-group:first", "#archives_tree_toolbar").append(toolbar_actions);

        $('a', "#archives_tree_toolbar").on("focus", function() {
          if ($(this).parents("li.dropdown-submenu").length) {
            $('.dropdown-menu', $(this).parent()).show();
          } else {
            $(".dropdown-submenu .dropdown-menu", $(this).parents(".nav")).css("display", "");
          }
        });
        $('.dropdown-submenu > a', "#archives_tree_toolbar").on("keyup", function(event) {
          // right arrow focuses submenu
          if (event.keyCode === 39) {
            $('.dropdown-menu a:first', $(this).parent()).focus()
          }
        });
        $('.dropdown-submenu > .dropdown-menu > li > a', "#archives_tree_toolbar").on("keyup", function() {
          // left arrow focuses parent menu
          if (event.keyCode === 37) {
            $("> a", $(this).parents(".dropdown-submenu:first")).focus();
          }
        });

      }
    };


    var setHashForNode = function(node_id) {
      if (node_id.indexOf("tree::") < 0) {
        node_id = "tree::"+node_id;
      }
      location.hash = node_id;
    };


    var changeHashSilently = function(newHash) {
      $(window).data("ignore-hashchange", true);
      location.hash = newHash;
    };


    var onHashChange = function(){
      if ($(window).data("ignore-hashchange")) {
        $(window).data("ignore-hashchange", false);
        return;
      }

      if (!location.hash || !location.hash.indexOf("tree::") != 0) {
        return;
      }

      var id_from_hash = location.hash.replace("tree::", "");

      if (form_changed) {
        confirmChanges($(id_from_hash));
        changeHashSilently("#tree::"+$(".selected", $tree).attr("id"));
        return;
      }

      var $selected = $(id_from_hash);
      $(".selected", $tree).removeClass("selected");
      $selected.addClass("selected");
      $tree.jstree("deselect_all");
      $tree.jstree("open_node", $selected);
      $tree.jstree("select_node", $selected);

      loadPaneForNode($selected);
      loadTreeActionsForNode($selected);
    };



    var addnewNode = function(parentNode, newNodeType,  newNodeConfig, new_object_params) {
      $tree.jstree("create_node", parentNode, "last", {"attr":{"id": "new"}, "data": {"title": "New "+newNodeConfig.label}});
      $("#new", $tree).addClass("new").attr("rel", newNodeType).data("params", new_object_params || {});
      $("#new", $tree).find("a").attr("href", "#new");
      setHashForNode("new");
    };


    var addTreeEventBindings = function() {

      $(".archives-tree-container").on("click", ".add-child", function() {
        var $selected = $(".selected", $tree);
        if ($selected.length === 0) {
          return;
        }

        addnewNode($selected, $(this).attr("rel"), config.rules[$(".selected", $tree).attr("rel")]["can_add_child"][$(this).attr("rel")]);
      });

      $(".archives-tree-container").on("click", ".add-sibling", function() {
        var $selected = $(".selected", $tree);
        if ($selected.length === 0) {
          return;
        }

        addnewNode($selected.parents("li:first"), $(this).attr("rel"), config.rules[$selected.parents("li:first").attr("rel")]["can_add_child"][$(this).attr("rel")]);
      });

      $(".archives-tree-container").on("click", ".spawn", function() {
        var $selected = $(".selected", $tree);
        if ($selected.length === 0) {
          return;
        }

        var rules = config.rules[$(".selected", $tree).attr("rel")]["can_spawn"][$(this).attr("rel")];

        var params = {};
        params[$(".selected", $tree).attr("rel")+"_id"] = $(".selected", $tree).data("id");

        addnewNode($selected, $(this).attr("rel"), rules, params);
      });

      $container.on("click", ".btn-cancel", function() {
        event.preventDefault();
        event.stopImmediatePropagation();
        if ($(this).attr("disabled")) {
          return;
        }

        if ($(".selected", $tree).attr("id") === "new") {
          setHashForNode($(".selected", $tree).parents("li:first").attr("id"));
        } else {
          loadPaneForNode($(".selected", $tree));
        }
      });

      $(".archives-tree-container").on("click", ".expand-tree .btn", function() {
        $(".archives-tree-container").addClass("expanded");
        $(".archives-tree-container").animate({
          width: $(".archives-tree-container").parents(".container:first").width()-5
        }, 500);
      });

      $(".archives-tree-container").on("click", ".retract-tree .btn", function() {
        $(".archives-tree-container").animate({
          width: $(".archives-tree-container").parent().width()
        }, 500, function() {
          $(".archives-tree-container").removeClass("expanded");
          $(".archives-tree-container").css("width", "auto");
        });
      });

      $(".archives-tree-container").on("click", ".move-node", function(event) {
        event.preventDefault();
        event.stopPropagation();

        var $selected = $(".selected", $tree);
        if ($selected.length === 0) {
          return;
        }

        var target_index = $(this).data("target-index") || 0;

        $tree.jstree("move_node", "#"+$selected.attr("id"), "#" + $(this).data("target-node-id"), target_index);

        // rerender toolbar actions!
        loadTreeActionsForNode($selected)

        $("a:first", $selected).focus();
      });

      $(window).hashchange(onHashChange);
      $(window).bind("beforeunload", function(event) {
        if (form_changed) {
          return 'Please note you have some unsaved changes.';
        }
      });


      var resizeArchivesTree = function() {
        var height = $("#archives_tree").parent().height() - $("#archives_tree_toolbar").outerHeight() - 21;
        $("#archives_tree").height(height);
      }

      $("#archives_tree").scroll(function() {
        if ($(this).scrollTop() === 0) {
          $(this).removeClass("overflow");
        } else {
          $(this).addClass("overflow");
        }
      });

      if ($.cookie("archives-tree-container::height")) {
        $(".archives-tree-container").height($.cookie("archives-tree-container::height"));
      } else {
        $(".archives-tree-container").height(AS.DEFAULT_TREE_PANE_HEIGHT);
      }
      setTimeout(resizeArchivesTree, 0);

      $(".archives-tree-container").resizable({
        handles: "s",
        minHeight: 80,
        resize: function(event, ui) {
          $.cookie("archives-tree-container::height", ui.size.height);
          resizeArchivesTree();
          $(window).triggerHandler("resize.tree");
        }
      });

    };


    var moveNode = function(nodeEl, targetNodelEl, newIndex) {
      var parent_id = "";
      if (nodeEl.attr("rel") === targetNodelEl.attr("rel")) {
        parent_id = targetNodelEl.data("id");
      }
      $.ajax({
        url: APP_PATH+nodeEl.attr("rel")+"s/"+nodeEl.data("id")+"/parent",
        type: "POST",
        data: {
          parent: parent_id,
          index: newIndex
        }
      });
    }


    var confirmChanges = function(targetNodeEl) {
      var parentIdFornew;
      if (targetNodeEl.attr("id") === "new") {
        parentIdFornew = targetNodeEl.parents("li:first").attr("id");
      }

      // open save your changes modal
      AS.openCustomModal("saveYourChangesModal", "Save Your Changes", AS.renderTemplate("save_changes_modal_template"));

      $("#saveChangesButton", "#saveYourChangesModal").on("click", function() {
        $("form", $container).triggerHandler("submit");

        var onSubmitSuccess = function() {
          form_changed = false;
          if (targetNodeEl.attr("id") === "new") {
            addnewNode($("#"+parentIdFornew));
          } else {
            setHashForNode(targetNodeEl.attr("id"));
          }
          $("#saveYourChangesModal").modal("hide");
        };

        var onSubmitError = function() {
          $("#saveYourChangesModal").modal("hide");
        };

        $container.one("submitted", function(event, data) {
          if (data.success) {
            onSubmitSuccess();
          } else {
            onSubmitError();
          }
        });
      });

      $("#dismissChangesButton", "#saveYourChangesModal").on("click", function() {
        form_changed = false;
        if (targetNodeEl.attr("id") != "new") {
          $tree.jstree("delete_node", $('#new', $tree));
        }
        setHashForNode(targetNodeEl.attr("id"));
        $("#saveYourChangesModal").modal("hide");
      });
    };


    var initTree = function(onTreeLoadCallback) {
      $tree.jstree({
        "themes": {
          "theme": "default",
          "url": "<%= asset_path('jstree/style.css') %>"
        },
        "dnd": {
          "drop_target" : false,
          "drag_target" : false
        },
        "ui": {
          "selected_parent_close": false,
          "selected_parent_open": true
        },
        "crrm" : {
          "move" : {
            "check_move" : function (m) {

              // can't move top level parent
              if ($(m.o[0]).hasClass(config.root_node_type)) {
                return false;
              }

              // can't move to above the root child node
              if ($(m.np[0]).hasClass("archives-tree")) {
                return false;
              }

              return true;
            }
          }
        },
        "core": {
          "animation": 0
        },
        "cookies": {
          "save_selected": false
        },
        "hotkeys": {
          "up": false,
          "ctrl+up": function() {
            $(".move-node-up","#archives_tree_toolbar").trigger("click");
          },
          "shift+up": false,
          "down": false,
          "ctrl+down": function() {
            $(".move-node-down","#archives_tree_toolbar").trigger("click");
          },
          "shift+down": false,
          "left": false,
          "ctrl+left": function() {
            $(".move-node-up-level","#archives_tree_toolbar").trigger("click");
          },
          "shift+left": false,
          "right": false,
          "ctrl+right": function() {
            $($(".move-node-down-into","#archives_tree_toolbar")[$(".selected", $tree).index()]).trigger("click");
          },
          "shift+right": false,
          "space": false,
          "ctrl+space": false,
          "shift+space": false,
          "f2": false,
          "del": false
        },
        "plugins": [ "themes", "html_data", "ui", "crrm", "dnd", "cookies","hotkeys"]
      }).one("loaded.jstree", function() {
          $(".selected", $tree).removeClass("selected");

          if (location.hash) {
            $(location.hash.replace("tree::","")).addClass("selected");
          }

          if ($(".selected", $tree).length === 0) {
            $("li:first", $tree).addClass("selected");
          }

          $tree.jstree("open_node", $(".selected", $tree));
          $tree.jstree("select_node", $(".selected", $tree));

          loadTreeActionsForNode($(".selected", $tree));

          setTimeout(function() {
            $(".selected a:first", $tree).focus();
          }, 0);

          if (onTreeLoadCallback) onTreeLoadCallback();
        }).bind("before.jstree", function (event, data) {
          // check current form
          if (form_changed && data.func === "select_node") {
            event.preventDefault();
            event.stopImmediatePropagation();

            // don't do anything if node hasn't changed
            if ($(data.args[0]).attr("href") === location.hash) {
              return;
            }

            confirmChanges($(data.args[0]).parent());
            return false;
          }
        }).bind("select_node.jstree", function (event, data) {
          var $nodeToSelect = $(data.rslt.obj);
          if ($nodeToSelect.find("a").attr("href") === location.hash) {
            return;
          }
          if ($nodeToSelect.attr("id") === "new") {
            setHashForNode("new");
          } else {
            setHashForNode($nodeToSelect.find("a").attr("href"));
          }
        }).bind("move_node.jstree", function(event, data) {
          moveNode(data.rslt.o, data.rslt.cr, data.rslt.o.index());
        });
    };

    $tree.html(AS.renderTemplate("tree_template", {tree: AS.tree_data, config: config}));
    initTree(function() {
      loadPaneForNode($(".selected", $tree));
    });
    addTreeEventBindings();
  }
});
//= require jquery.cookie
//= require jquery.ba-hashchange
//= require jstree
//= require subjects.crud

$(function() {

    var form_changed = false,
        $tree = $("#archives_tree"),
        $container = $("#object_container"),
        collection_tree_data = AS.tree_data["collection-id-" + $(".archives-tree").data("collection-id")];

    var renderTree = function() {
        $tree.html(AS.renderTemplate("tree_template", {tree: collection_tree_data}));
     }

    var rerenderTree = function(callback) {
        var selected_node_id = $(".selected", $tree).attr("id");
        
        if (selected_node_id === "newAO") {
           selected_node_id = "archival_object_" + $("#ao_id", $container).val();
        }

        $.getJSON(APP_PATH + "collections/" + collection_tree_data.collection_id + "/tree", function(json) {
            collection_tree_data = json;

            renderTree();

            $("#"+selected_node_id, $tree).addClass("selected");

            initTree(callback);
        });
    };
   
    var initForm = function(html) {
      $container.html(html);         

      var $form = $("form", $container);

      $(".btn-cancel", $form).html("Revert Changes")
      $(".btn-cancel", $form).before("<a id='save_and_finish_editing' class='btn btn-success' href='" + APP_PATH + "collections/" + collection_tree_data.collection_id + location.hash + "'>Finish Editing</a>");

      if (location.hash !== "#newAO") {
         $(".btn-primary", $form).attr("disabled", "disabled");
         $(".btn-cancel", $form).attr("disabled", "disabled");
      }

      $form.bind("form-changed", function() {
          form_changed = true;
          $(".btn-primary", $form).removeAttr("disabled");
          $(".btn-cancel", $form).removeAttr("disabled");
      });

      $("#createPlusOne", $form).click(function() {
         var createPlusOne = function(event, data) {
            if (data.success) {
               // if parent is a collection add +1 as a child
               if ($(".selected", $tree).parents("li:first").hasClass("collection")) {
                  $(".archives-tree-container .add-child-archival-object-analog").trigger("click");
               } else {
                  // else add +1 as a sibling
                  $(".archives-tree-container .add-sibling-archival-object-analog").trigger("click");
               }
            }
         };
         
         $container.one("submitted", createPlusOne);
         $form.triggerHandler("submit");
      });

      $form.ajaxForm({
          data: {
             inline: true
          },
          beforeSubmit: function() {
            $(".btn-primary", $form).attr("disabled","disabled");
          },
          success: function(response, status, xhr) {
             initForm(response);

             if ($container.find(".alert-error:first, .alert-warning:first").length) {
                $container.triggerHandler("submitted", {success: false});
             } else {
                if (location.hash === "#newAO") {
                   changeHashSilently("#archival_object_" + $(response).find("#ao_id").val());
                }
                form_changed = false;
                rerenderTree(function() {
                   $container.triggerHandler("submitted", {success: true});
                });                
             }
          }, 
          error: function(obj, errorText, errorDesc) {
             $container.triggerHandler("submitted", {success: false});
             $(".btn-primary", $form).removeAttr("disabled");
          }
       });

       $form.find(":input:not(:hidden):first").focus()

       $container.triggerHandler("form.loaded");
  };
   
   var loadPaneForNode = function(nodeEl) {
         if (nodeEl.attr("id") === "newAO") {
            
            var data = {
               collection: collection_tree_data.collection_id,
               inline: true
            };

            var $parentNodeEl = nodeEl.parents("li:first");
            if ($parentNodeEl.attr("rel") === "archival_object") {
               data.parent = $parentNodeEl.data("id");
            }
            
            $.ajax({
               url: APP_PATH + "archival_objects/new",
               data: data,
               type: "GET",
               success: function(html) {
                  initForm(html);              
                  $("form", $container).triggerHandler("form-changed");
               },
               error: function() {
                  console.log("ERROR! $('.archives-tree-container').on('click', '.add-child-archival-object-analog')");
               }
            })
         } else if (nodeEl.attr("rel") === "archival_object") {
            $.ajax({
                url: APP_PATH+"archival_objects/"+nodeEl.data("id")+"/edit?inline=true",
                success: function(html) {
                    initForm(html);
                }
            });
        } else if (nodeEl.attr("rel") === "collection") {         
             $.ajax({
                url: APP_PATH+"collections/"+nodeEl.data("id")+"/edit?inline=true",
                success: function(html) {
                    initForm(html);
                }
            });
        }
   };

   var renderTreeNodeNavigation = function(event) {
      var currentNodeEl = $(".selected", $tree);
      if (currentNodeEl.length === 0) {
         return;
      }

      var allNodes = $tree.find("li");
      var indexOfCurrentNode = allNodes.index(currentNodeEl);
      var data = {};
      if (indexOfCurrentNode !== 0) {
         data.previous = allNodes.get(indexOfCurrentNode-1).id;
      }
      if (indexOfCurrentNode+1 < allNodes.length) {
         data.next = allNodes.get(indexOfCurrentNode+1).id;
      }
      $(".btn-toolbar > .btn-group:first", "#archives_tree_toolbar").append(AS.renderTemplate("tree_nodenavigation_toolbar_template", data));
   };

   var loadTreeActionsForNode = function(nodeEl) {
      // render tree toolbar
      $("#archives_tree_toolbar").html(AS.renderTemplate("tree_toolbar_template"));
      renderTreeNodeNavigation();
      if ((nodeEl.hasClass("collection") && nodeEl.find("> ul > li").length === 0) || nodeEl.attr("id") != "newAO") {
         $(".btn-toolbar > .btn-group:first", "#archives_tree_toolbar").append(AS.renderTemplate("tree_toolbar_addchild_template"));
         if (!nodeEl.hasClass("collection") && !nodeEl.parents("li:first").hasClass("collection")) {
            $(".btn-toolbar > .btn-group:first", "#archives_tree_toolbar").append(AS.renderTemplate("tree_toolbar_addsibling_template"));
         }
      }
   };

   var changeHashSilently = function(newHash) {
      $(window).data("ignore-hashchange", true);
      location.hash = newHash;
   };

   var onHashChange = function(){
      if ($(window).data("ignore-hashchange")) {
         $(window).data("ignore-hashchange", false);
         return;
      }      
      if (form_changed) {
         confirmChanges($(location.hash));
         changeHashSilently("#"+$(".selected", $tree).attr("id"));
         return;
      }

      var $selected = $(location.hash);
      $(".selected", $tree).removeClass("selected");
      $selected.addClass("selected");
      $tree.jstree("deselect_all");
      $tree.jstree("open_node", $selected);
      $tree.jstree("select_node", $selected);

      loadPaneForNode($selected);
      loadTreeActionsForNode($selected);
   };

   var addEventBindings = function() {

      $(".archives-tree-container").on("click", ".add-child-archival-object-analog", function() {
         var $selected = $(".selected", $tree);
         if ($selected.length === 0) {
            return;
         }

         $tree.jstree("create_node", $selected, "last", {"attr":{"id": "newAO"}, "data": {"title": "New Archival Object"}});
         $("#newAO", $tree).addClass("analog").attr("rel", "archival_object");
         location.hash = "#newAO";
      });
      
      $(".archives-tree-container").on("click", ".add-sibling-archival-object-analog", function() {
         var $selected = $(".selected", $tree);
         if ($selected.length === 0) {
            return;
         }
         
         $tree.jstree("create_node", $selected.parents("li:first"), "last", {"attr":{"id": "newAO"}, "data": {"title": "New Archival Object"}});
         $("#newAO", $tree).addClass("analog").attr("rel", "archival_object");
         location.hash = "#newAO";
      });
 
      $container.on("click", ".btn-cancel", function() {
         event.preventDefault();
         event.stopImmediatePropagation();
         if ($(this).attr("disabled")) {
            return;
         }
         
         if ($(".selected", $tree).attr("id") === "newAO") {
            location.hash = $(".selected", $tree).parents("li:first").attr("id");
         } else {
            loadPaneForNode($(".selected", $tree));
         }
      });

      $(".archives-tree-container").on("click", ".expand-tree .btn", function() {
          $(".archives-tree-container").addClass("expanded");
          $(".archives-tree-container").animate({
              width: $(".archives-tree-container").parents(".container:first").width()-5
          }, 500);
      });
      
      $(".archives-tree-container").on("click", ".retract-tree .btn", function() {
          $(".archives-tree-container").animate({
              width: $(".archives-tree-container").parent().width()
          }, 500, function() {
              $(".archives-tree-container").removeClass("expanded");
              $(".archives-tree-container").css("width", "auto");
          });
      });

      $(window).hashchange(onHashChange);
      $(window).bind("beforeunload", function(event) {
         if (form_changed) {        
            return 'Please note you have some unsaved changes.';
         }
      });
   };

   var confirmChanges = function(targetNodeEl) {
      // open save your changes modal
      AS.openCustomModal("saveYourChangesModal", "Save Your Changes", AS.renderTemplate("save_changes_modal_template"));

      $("#saveChangesButton", "#saveYourChangesModal").on("click", function() {
         $("form", $container).triggerHandler("submit");

         var onSubmitSuccess = function() {
            form_changed = false
            location.hash = targetNodeEl.attr("id");
            $("#saveYourChangesModal").modal("hide");
         };

         var onSubmitError = function() {
            $("#saveYourChangesModal").modal("hide");
         };

         $container.one("submitted", function(event, data) {
            if (data.success) {
               onSubmitSuccess();
            } else {
               onSubmitError();
            }
         });
      });

      $("#dismissChangesButton", "#saveYourChangesModal").on("click", function() {
         form_changed = false;
         $tree.jstree("delete_node", $('#newAO', $tree));
         location.hash = targetNodeEl.attr("id");
         $("#saveYourChangesModal").modal("hide");
      });
   };

   var initTree = function(onTreeLoadCallback) {
      $tree.jstree({
          "themes": {
             "theme": "default",
             "url": "<%= asset_path('jstree/style.css') %>"
          },
          "dnd": {
             "drop_target" : false,
             "drag_target" : false
          },
          "ui": {
            "selected_parent_close": false,
            "selected_parent_open": true
          },
          "crrm" : {
             "move" : {
                 "check_move" : function (m) {

                     // can't move collection
                     if ($(m.o[0]).hasClass("collection")) {
                       return false;
                     }                     
                     // can't into collection
                     if ($(m.np[0]).hasClass("collection")) {
                        return false
                     }
                     
                     // can't move to above the root archival object
                     if ($(m.np[0]).hasClass("archives-tree")) {
                       return false;
                     }                                          
                     
                     return true;
                 }
             }
         },
         "core": {
           "animation": 0 
         },
         "cookies": {
             "save_selected": false
         },
         "plugins": [ "themes", "html_data", "ui", "crrm", "dnd", "cookies"]
      }).one("loaded.jstree", function() {
         $(".selected", $tree).removeClass("selected");

         if (location.hash) {
            $(location.hash).addClass("selected");
         }

         if ($(".selected", $tree).length === 0) {
            $("li:first", $tree).addClass("selected");
         }

         $tree.jstree("open_node", $(".selected", $tree));
         $tree.jstree("select_node", $(".selected", $tree));

         loadTreeActionsForNode($(".selected", $tree));
         
         if (onTreeLoadCallback) onTreeLoadCallback();
      }).bind("before.jstree", function (event, data) {
            // check current form
            if (form_changed && data.func === "select_node") {
               event.preventDefault();
               event.stopImmediatePropagation();

               confirmChanges($(data.args[0]).parent());
               return false;
            }
         }).bind("select_node.jstree", function (event, data) {
            var $nodeToSelect = $(data.rslt.obj);
            if ($nodeToSelect.find("a").attr("href") === location.hash) {
               return;
            }
            if ($nodeToSelect.attr("id") === "newAO") {
               location.hash = "#newAO";
            } else {
               location.hash = $nodeToSelect.find("a").attr("href");
            }
         }).bind("move_node.jstree", function(data) {
             
             var parseTree = function(nodeEl) {
                var result = {
                   archival_object: nodeEl.data("archival_object")
                };
                
                var children = [];
                nodeEl.find("> ul > li").each(function() {
                   children.push(parseTree($(this)));
                });
                
                result.children = children;
                
                return result;
             };
             
             $.ajax({
                url: APP_PATH+"collections/"+collection_tree_data.collection_id+"/update_tree",
                type: "POST",
                data: {
                   tree: JSON.stringify(parseTree($tree.find("li[rel=archival_object]:first")))
                },
                success: function() {
                   //alert("holla");
                },
                errors: function() {
                   //alert("balls");                           
                }
             });
         });
   };

   if ($tree.length) {
      renderTree();
      initTree(function() {
          loadPaneForNode($(".selected", $tree));
      });   
      addEventBindings();
   }

});